01_Вступ до мови програмування C++

с++ - компільована мова програмування
Строго типізована мова

viasual studio

workloads - deckstop development with c++

ctrl + F5 - запуск програми
просто F5 - дебагер
ctrl + D - клон рядка

ctrl + alt + l  відкривається права панель з файлами

ctrl + K + F  виправляється формат коду

F10 debager

alt + стрілка - переносить рядок
ctrl + D - копіює рядок вниз
ctrl + shift + V - історія буфера 
ctrl + r + r - заміняє виділене скрізь 

-------------------------
#include<iostream>
using namespace std;

void main()
------------------------------


void main() - основна функція, точка входу в програму
void - озаначає що функція нічого не повертає

cout << "Hello world";  - типа принт 
cout << "You have to pay : " << price << " grn"; - вивід змінної price

Типи даних: - визначає першим ділом розмір комірочки і тип інформації що записуються
	1.Числові
		дроби
			float  - 4 bites
			double - 8 bites (16 цифр після коми
		цілі
			int - 4b 
			short 2b from -32768 to 32767
			long 4b 
			long long 8b - нереально велике число
			
			unsigned int - тільки в додатньому діапізоні
	2.Текст
			char - один символ 1байт (в одинарних ' ')
	3.Логіка
		bool - 1байт true false
	
	enum - набір цілочісельних констант

перетворення типів даних:
	Звужуюча форма (втрачаються частина даних)
		int a = 23.5; - знаки після коми відкидаються 
	розширююче перетворення:
		double x = 3.21; (насправді х = 3,2100000000000000)
		
	явне перетворення:
		double k = 37.4; (37.400000000000000)
		float r = (int) k; (float 37.00000000)
	неявне:
		
	Уніфікована ініціалізація
		int num1 = 11.3; (num = 11.00000)
		int num2 = {11.3} - при компіляції буде помилка
		


		
правила назв зміних те саме що на пайтоні
при створенні зміної спочатку вказується тип
int age = 16;

Константа:
conts float PI = 3.14; - це значення вже змінити не можна

ввід з клавіатури:
int numer;
cout << "enter number: "
cis >> number;


========================================================================
02 logic operators

оператор - конструкція мови що призводить дії над даними

унарні -5 -1 -9 +6
Бінарні * - + / %

// - виводить ціле число а залишок пілся коми відкидає
% - виводить залишок після цілого ділленя. Якщо ==0, значить число ділиться без залишку. Коли меньше число ділимо на більше, тоді результат меньше число (10%12=10)

+= 
-=
%=
/=
*=

оператори порівння
	< > 

оператори рівності
	== дорівнює
	!= — не равно

Логічні оператори 
	1 (true)
	0 (false)
	&& - and
	|| - or
	!  - not
	if
	else if      (elif)
	else

Тернарний оператор	
	інкримент ++
		постфіксна форма: a++; (те саме що а += 1;)
		префіксна форма: ++а;  (те саме що а += 1;)

	декремент --
		постфіксна форма: a--; (те саме що а -= 1;)
		префіксна форма: --а;  (те саме що а -= 1;)

перетворення типів даних:
	Звужуюча форма (втрачаються частина даних)
		int a = 23.5; - знаки після коми відкидаються 
	розширююче перетворення
		int a = 3000000000; (не влазить значення

	
if (b==0)
{

}
else
{

}

Тернарний оператор
   ТВЕРДЖЕННЯ АБО ВИРАЗ ? ДІЯ1 : ДІЯ2;
		(b == 0) ? cout << "You can*t divide by zero!!!!" << endl : cout << "Result = " << a / b << endl;
		(b != 0) ? cout << "Result = " << a / b << endl : cout << "You can*t divide by zero!!!!" << endl;
		
		max = (a > b) ? a : b;
		min = (a < b) ? a : b;

========================================================================
03_Switch Enum

switch (grade)
	{
	case 'A':case 'a':
		cout << "Your grade is 5" << endl;
		break;
	case 'B':
		cout << "Your grade is 4" << endl;
		break;
	case 'C':
	case 'c':
		cout << "Your grade is 3" << endl;
		break;
	case 'D':
	case 'd':
		cout << "Your grade is 2" << endl;
		break;
	case 'F':
	case 'f':
		cout << "Your grade is 1" << endl;
		break;
	default:
		cout << "This grade is invalid\n";
		break;
	}
	
Якщо немає braak в case то виконується все кайси до того як наштовхнейться на брейк
char key то треба вказувати в один лапках 
	case '+':
int key то  
	case 1:

	case 'A':case 'a': - можна перераховувати кейси один за одиним і ставити їм уодну дію
	
enum - набір цілочісельних констант.

enum coins{penny = 1 , nickel = 5, dime =10 , quarter = 25 , half= 50 , dollar_coin = 100};

по замовчуванню, якщо не задати данні то задається 0,1,2 ітд
enum coins{penny, nickel, dime = 10, quarter, half= -1 , dollar_coin }; - йде спочатку 0,1,10,11, -1, 0
Тобто перерахування від вянказаного значення поки не вказати нове значення

========================================================================
Цикли
04_while 

Цикл з передумовою(while);

	int counter = 1;
	while (counter <= 7)
		{
		cout << "You have seen the " << counter <<
			" Wonder of the world!!!\n";
		counter++;
		}
	cout << "Now, you can begin your essay.\n";
	
Цикл з постумовою(do...while); //while True ..if break

	do
	{
		cout << "Choose operation : " << endl;
		cout << "[ 1 ] - If you want to Add two number " << endl;
		cout << "[ 2 ] - If you want to Deduct two number " << endl;
		...
		cin >> key;
		switch (key)
		{
		case 1:
			cout << "Enter a : "; cin >> a;
			cout << "Enter b : "; cin >> b;
			res = a + b;
			cout << "Answer : " << a << " + " << b << " = " << res << endl;
			break;
			
			.....
			
			cout << "Enter a : "; cin >> a;
			cout << "Enter b : "; cin >> b;
			if (b != 0)
			{
				res = a / b;
				cout << "Answer : " << a << " / " << b << " = " << res << endl;
			}
			else
			{
				cout << "\nError! You cannot divide by "
					"zero!\n";
			}
			break;
		case 0:
			cout << "Have a nice!!!" << endl;
			break;
		default:
			cout << "Wrong choice......" << endl;
			break;
		}
	} while (key!=0);


========================================================================
05_for_06_includeCycles

Цикл for, Вкладені цикли, Debuger

Цикл з параметрами(for).
 
	for (size_t i = 0; i < length; i++)
	
	for (int i = 0; i < 10; i++) - i створюються всередині циклу і знищується
	{
		cout << i << " ";
	}
break, continue працюють
	
Безкінечний цикл
int number;
	int sum = 0;
	for ( ;  ;  )// реалізація нескінченного циклу
	{
		cout << "Enter number : "; 
		cin >> number;
		if (number == 0)break;
		sum += number;
	}
	cout << "Suma all numbers = " << sum << endl;
	
Вкладені цикли

	int size = 10;

    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            if (i >= j && i + j >= size - 1)
                cout << "|===|";
            else
                cout << "     ";
        }
        cout << endl;
    }
	
========================================================================
Масиви, дебагер
07_Array

Типи помилок:
	- Помилка на етапі компілації (синтатична помилка)
	- Помилка на етапі виконання (прога запустилась але крашнулась)

Дебагер
F10 - старт дебагера спочатку коду, F10 переходимо на наступний рядок покроково
стаємо на потрібний рядок і F9, або зліва ставимо червону точку
F5 прога пробігає код до точкі зупинки, F10 далі
В циклі щоб не перебігати всі етирації циклу, правою кнопкою на точку зупинки і обираємо з умовами

Масиви (array) - набір однотипних даних об"єднаний загальним імя"м
	int arr[3]; - всі комірки будуть типу даних int
	arr[0] = 3;
	
	const int size = 5;
	int new_arr[size];
	int arr[size] = {1,30,5,4,7};
	int arr4[size] = {} - для того щоб все заповнилось нулями
Заповнення масиву за допомогою циклу
	cont int size = 5;
	int arr[size];
for (int i = 0; i < SIZE; i++)
    {
        cout << "Enter " << i + 1 << " element ";
        cin >> arr5[i];
    }
Вивід масиву
	for (int i = 0; i <SIZE; i++)
    {
        cout << arr5[i] << " ";
    }
    cout << endl;

========================================================================
08_Random_Matrix

Види пам"яті
Stack - елементи складаються одна на одну
Static - 
Heap Denamic memory

srand(time(0)); - вказує точку відправки відносно часу, вказується ОДИН раз на початку коду
а = rand(); - згенерує ціле число від 0 до 32767

ЧИСЛО В ДІАПАЗОНІ ВІД НУЛЯ ДО Х: rand() % X

ЧИСЛО В ДІАПАЗОНІ ВІД Х  ДО Y : rand() % (Y - X) + X
        //(16-11)
        a = rand() % (16-11) + 11;
		// -20 ... +20
		((rand() % 40) - 20)

		
void fillRandomUp(int arr[], int size, int left, int right)
{
	srand(time(0));
	for (int i = 0; i < size; i++)
	{
		arr[i] = (rand() % (right - left)+left);
	}
}		
		
		
		

Багатовимірні масиви 
Матриця - це сукупність одновимірних масивів

	srand(time(0));
	
	const int row = 5;
	const int col = 6;
	int array[row][col];
    
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            array[i][j] = rand() % 90 + 10;//10...100
            cout << array[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;

========================================================================
09_Functions
Функції

Два способи оголошення функції
	- перед main
	- після main, тоді треба прописати до мейн прототип фукції 
		(прототип це перша строчка, напр int Hello ();
	
void Hello ()  (void значить що функція нічого не повертає)
{
	cout << "Hello"<<endl;
}


int sum(int a, int b)
{
	res = a + b;
	return res
}

result = sum(a,b);

Не можна створювати одну функцію всереди іншої. 
Не можна звернутися до функції до її оголошення

Звичайні змінні приходять як копії а масив - в оригіналі!!!!

Глобальна змінна - це змінна поза будь якими функціями, поза будь якими { }

Глобальні змінні інізіалізуються нулем.
int B; (B = 0)

int A = 99; - глобальна змінна
void main()
{
	int A - локальна змінна
	::A - звернення до глобальної зміної
}

Функція з дефолтними значенями
void StarDefault(int a = 20) - 20 це дефолтне значення, якщо аргумент не заданий користувачем

Пам'ять:
-Stack (глобальні і локальні змінні)
-Static - статистичні змінні
-Heap

Локальна змінна живе у одинних {}
Глобальна змінна - пишеться поза функціями
Статична локальна змінна - створюється функцією один раз і не стираєтсья з виходом з функції і знищуєтсья коли main закривається
	static int 


========================================================================
10_Overload_Function_and_Template

Інлайнові Фукції
inline void hello() - в кожне місце де є звернення до функції при підготовці до компіляції копіюється код функції, замість з того щоб пригати по строчкам. Разіонально використовувати для функції в один два рядки

Перезавантаження функцій
Створення кількох однакових функцій з однаковою назвою, але з різним початком int long float, і відповідно з прийомом різних видів данних аргумента, або різну кількість аргументів
	-перезавантаження функцій по виду данних
	- перезавантаження функцій по кількості елементів

int multy(int x)
{
	return x * x * x;
}
float multy(float x, float y)
{
	return x * x * y;
}
double multy(double x, double y, double z)
{
	return x * y * z;
}

Шаблони функцій
Дають змогу реалізовувати одну і ту ж функцію під різні типи данних (але НЕ для зміни кількості елементів)

template <typename T>
T max(T a, T b;
{
	return a > b ? a : b;
}

template <typename T1, typename T2 >
T2 Max(T1 a, T2 b)
{
	return a > b ? a : b;
}


========================================================================
11_Search_Arrange_array_Recursion
Пошук у масиві. Впорядкування масиву. Рекурсія.
Кирик Тетяна Анатоліївна

11__LinearSearchSort
Олена Сергіївна


Сортування вибором Selection Sort

void SelectSort(int arr[], int size)
{
	int temp, index;
	for (int i = 0; i < size; i++)
	{
		index = i;
		temp = arr[i];

		for (int j = i + 1; j < size; j++)
		{
			if (arr[j] < temp)
			{
				temp = arr[j];
				index = j;
			}
		}
		if (index != i)
		{
			arr[index] = arr[i];
			arr[i] = temp;

		}
	}
}


Бульбашка
bubble Sort
Постійне порівняння сусідніх елементів і заміна якщо вони не в тому порядку. Сама неоптимізована.
Постійним порівнянням 
Сложность алгоритма: В худшем и среднем случае: O(n²)

void BubbleSort(int arr[], int size)
{
	int temp;
	for (int i = 0; i < size; i++)
	{
		for (int j = size - 1; j > i; j--)
		{
			if (arr[j - 1] > arr[j])
			{
				temp = arr[j - 1];
				arr[j - 1] = arr[j];
				arr[j] = temp;
			}
		}
	}
}

Шейкерне сортування - оптимізована бульбашка
Як бабл тільки зувужуючі діапазон при знаходженні крайніх елементів
void ShakerSort(int arr[], int size)
{
	int j, index = size - 1;//9
	int left = 1, right = size - 1;
	int temp;
	do
	{
		for (j = right; j >= left; j--)
		{
			if (arr[j - 1] > arr[j])
			{
				temp = arr[j - 1];
				arr[j - 1] = arr[j];
				arr[j] = temp;
				index = j;//0
			}
		}
		left = index + 1;
		for (j = left; j <= right; j++)
		{
			if (arr[j - 1] > arr[j])
			{
				temp = arr[j - 1];
				arr[j - 1] = arr[j];
				arr[j] = temp;
				index = j;//9
			}
		}
		right = index - 1;
	} while (left < right);

}

Сортування вставкою

void InsertSort(int arr[], int size)
{
	int temp;
	int j;
	for (int i = 0; i < size; i++)
	{		
		temp = arr[i];
		for (j = i - 1; j >= 0 && arr[j] > temp; j--)
		{
			arr[j + 1] = arr[j];
		}
		arr[j + 1] = temp;
	}
}


Сортування Quick Sort Швидке сортування
Самий кращий метод сортування, скрізь використовується

Обираємо опорний елемент і все що більше вправо, все що меньше вліво, елемент стає на своє місце
Обирається новий опорний елемент і заново

void QuickSort(int arr[], int B, int E)
{
	int i = B, j = E;
	int temp, p;
	p = arr[(B + E) / 2];
	
	do
	{
		while (arr[i] < p)i++;
		while (arr[j] > p)j--;
		if (i <= j)
		{
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
			i++;
			j--;
		}
	} while (i <= j);
	if (B < j)QuickSort(arr, B, j);
	if (i < E)QuickSort(arr, i, E);
}




Рекурсія
Коли функція викликає сама себе
Переваги 
	можна оптимізованіше написати
	багато задач краще реалізовувати на рекурсії


Пошук у масиві

Лінійний пошук   - звичайний пошук через for

template <typename T>
int searchKey(T key, T arr[], int size)
{
	for (int i = 0; i < size; i++)
	{
		if (arr[i]==key)
		{
			return i;
		}
	}
	return -1;
}

Швидкий пошук для упорядкованого масиву (від меньшого до більшого)
template <typename T>
int searchKey(T key, T arr[], int size)
{
	for (int i = 0; i < size; i++)
	{
		if (arr[i] == key)
		{
			return i;
		}
		else if (arr[i]>key)
		{
			return -1;
		}
		cout << arr[i] << endl;
	}
	return -1;
}

Бінарний пошук ТІЛЬКИ по упорядкованому масиву ( на основі швидкому сортуванні)

int BinarySearch(int arr[], int size, int key)
{
	int B = 0, E = size - 1;
	while (true)
	{
		int p = (B + E) / 2;
		if (key > arr[p])
		{
			B = p + 1;
		}
		else if (key < arr[p])
		{
			E = p - 1;
		}
		else if (key == arr[p])
		{
			return p;
		}
		if (B > E) return -1;
	}
}


========================================================================
12_Pointers
Вказівник завжди має той самий тип даних що і те на що ми ставимо його

	int a = 5;
	int* pa = &a; - це буде вказівник на адресу змінної а, показує адресу комірки де лежить а.

а = 5  змінна а, в якій лежить значення 5
pa = &a = 0x0684864  - змінна ра, тип данних int* , яка зберігає в собі адресу 0x0684864 змінної а
*pa = 5 	коли ставимо * перед назвою змінної, куди ми зберегли адресу змінної а, нам покаже значення змінної

*(pa + 1) - значение ячейки следующей за а



	int a = 5;
	int* pa = &a;
	int b = 10;
	int* pb = &b;
	cout << a + b << endl; 		- покаже суму змінних а і b
	cout << *pa + *pb << endl;  - також покаже суму змінних а і b

	pa = &b; - тепер ми в змінну ра поклали адресу змінної b

	const int size = 5;
	int arr[size];
назва масиву і є адресою першої комірки!!!!!!
	int* p_arr = arr;  -   назва масиву і є адресою першої комірки!!!!!!

	int* newptr = arr; 	— создается указатель newptr, который указывает на первый элемент массива arr.
	*newptr = 0; 		— записывает 0 в первый элемент массива.
	newptr += 3; 		— сдвигает указатель на три элемента вперед (т. е. newptr теперь указывает на arr[3]).
	*newptr = 0; 		— записывает 0 в arr[3]

Вивід масива на екран через вказівники
	p_arr = arr;
	for (int i = 0; i < size; i++)
	{
		cout << *p_arr << " ";
		p_arr++;
	}

Заміна парних і не парних елементів
	const int size = 6;
	int arr[size] = { 10,20,30,40,50,60 };
	int* parr = arr;

	for (int i = 0; i < size - 1; i += 2) 
	{
		int temp = *(parr + i);
		*(parr + i) = *(parr + i + 1);
		*(parr + i + 1) = temp;
	}
	
int a = 10;
int* ptr = nullptr; - створення порожнього вказівника

========================================================================
13_PointerInFunctionLinks

Вказівники у функціях

	a=0;
	ChangeVariable(&a) - передаємо адресу змінної а в фукцію

ChangeVariable(int* pa) - функціЯ отримує фактичну адресу змінної
{
(*a)++; - змінює безпосередньо значення змінної по вказівнику
}


int* FindMax(int* arr, int size) - передається просто змінна arr, яка і є вказівником на нульовий елемент масиву
{
    int* max = arr;
    for (int i = 0; i < size; i++)
    {
        if (*(arr + i) > *max)  - * вказує що достати значення, arr+i вказує з якої комірки)
        {
            max = arr + i;
        }
    }
    return max;
}

========================================================================
14_Links
Лінки  Посилання

Посилання (ссилка) link
	int c = 7;
	int& lc = c; - створили адресу (типу int&) на змінну с
Тобто змінна lc має доступ до значення с.

	void change(int& a)   - Вносимо посилання в функцію, і вноситься зміни в оригінал за посиланням 
	{
		a++;
	}

Для масивів
 передаємо аrr, що є вказівником на 
 індекс arr
	
	int& FindMax(int* arr, int size) 
		int max = arr[0];
		int index_max = 0;
		for (int i = 0; i < size; i++)
		{
			if (*(arr + i) > max)
			{
				max = *(arr + i);
				index_max = i;
			}
		}
		//max= 81; index_max = 5
		return arr[index_max];//81
	}
Вертається посилання на відповідну комірку в arr 

========================================================================
15_CStyleLines
Рядки C-style - це масив типу даних char 

char mystring[]= "string"; 
В кінці ставиться нуль-термінатор, тому 7 символям в масиві
sizeof(mystring) - показує розмір масиву
cout <<  - виводить все з масиву до нуль-термінатора (\0)
	
	char myname[255];
	cout << "Enter name: << endl;
	cin.getline(myname, 255) -  Записує всі символи у в кінець ставить нуль
термінатор. Якщо символів більше, лишнє обріже
	
	char text[] = "Print this!";
	char copy[50];
	
	strcpy_s(copy, text); - копіює з одного массиву в інший
	
	char name[255] = "Olena"
	sizeof(name) = 255 - показує розмір масиву (контейнеру), скільки створено
елементів 
	strlen(name)  = 5 - показує кількість реально збережених символів
	
	
	
========================================================================
16_FormatFunction
SetPos, SetColor

#include <iomanip>
#include <Windows.h>

setw(n) - кількість комірок, зарезервованих в консолі. Впливає на все, що виводиться після нього
	cout << setw(3)<< "A" << endl; - виводиться місце під 3 символи і розташовує А справа
	cout << left << setw(3)<< "A" << endl; - тепер зліва

void SetColor(int color)
{
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}

	
void SetPos(int x, int y)
{
    COORD c;
    c.X = x;
    c.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}


system("cls"); - затирає консоль


========================================================================
16_LinesFunction

Рядки. Стандартні рядкові функції.
Кирик Тетяна Анатоліївна

#include <cstring>

const int size = 200;
char str[size] = "C style string - Standart function strcpy()";
cout << str + 20 << endl; - показує рядок з 21 символа
char copyStr[size]

strcpy_s(copyStr, str); - копіює з str  у copyStr
strcat_s(copyStr, "new text") - приєднує текст до кінця рядка

strcmp(one,two);  - результат 0, значить однак4ові
більше нуля - перший рядок більший
меньше нуля - перший рядок меньший

strncmp(one,two, 4) - рівняються тільки 4 символа
_stricmp(one,two) - ігнорує регістр

strlen() - повертає кількість символів



Функції пошуку

пошук символу:
char symbol = 't';
char* p = 

strchr(str,symbol); - вертає вказівник на ячейку з першим входженням (шукає спочтку), або nullptr якщо не знайшла 

strrchr(str,symbol); - шукає справа (останнє входження)

пошук слів
strstr(str,word); - вертає вказівник на першу букву цього слова

========================================================================

17_Dynamic_array_Dynamic_memory

Динамічна пам'ять. Динамічні змінні та масиви.

Види памяті
1) Global and static data (глобальні змінні)
2) stack (LIFO) - локальні змінні
3) Dinamic memory (heap, free memory) 

HEAP:

створення змінної в HEAP
new int {123}

Для доступу треба створити вказівник
int* p = new int {123} - значення 123 зберігаєтсья на HEAP, а сам вказівник р в стеку 
delete p; - видалення динамічної змінної в HEAP
Тепер вказівник p показує в собі сміття
p = nullptr; - затираємо сам вказівник


Динамічні массиви

int size = 20;  - розмір може бути не статичним
int* arr = new int[size] {}  - arr (вказівник на стеку) а данні в HEAP


void printArray(const int* arr, int size)
{
	cout << "Array: ";
	for (int i = 0; i < size; i++)
	{
		cout << "\t" << arr[i];
	}
}
void fillArrayWithRand(int* arr, int size)
{
	static bool firstTime = true;
	if (firstTime) {
		firstTime = false;
		srand(unsigned(time(0)));
	}
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 100;
	}
}

В функцію вводим int * & arr, виходить посилання на вказівник, в кінці arr = temp; - щоб вказати по посиланню вказівник уже на новий массив


========================================================================
18_Pointer_to_pointer_Dynamic_Matrix
Вказівник на вказівник. Динамічні двовимірні масиви

	int * p = new int{120}; - вказує на ділянку в хіпі
	int * * p2 = &p. - він вказує на р, тобто він містить адресу самої змінної р.

	cout<< **p2<< endl; - показує зміст 120

	*(arr+i) = arr[i]

	int * arr = new int [3] {100,200,300}
	arr[0] = *(arr+0)



Динамічні двовимірні масиви

Полу динамічний:
	const int ROWS = 3;
	int * matrix[ROWS];
	int cols = 4;


	matrix[i] = new int [cols] {};
	*(*(matrix+1)+2) =  matrix[1][2] - 
	matrix[0][0] = 120; - задаємо значення
	delete [] matrix [i]


Повно динамічний масив

int rows; (просто НЕ константа змінна, можно з клавіатури)
int cols; (просто НЕ константа змінна, можно з клавіатури)

int ** matrix = new int* [rows]; (вказівник на динамічну матрицю, але поки створенний тільки масив ВКАЗІВНИКІВ на майбетні рядки



int** createMatrix(int rows, int cols) {
	int** matrix = new int* [rows];
	for (int i = 0; i < rows; i++)
	{
		int* row = new int[cols] {};
		matrix[i] = row;

	}

	return matrix;
}


void printMatrix(int** m, int r, int c)
{
	if (m == nullptr)
	{
		cout << "Empty matrix!\n";
		return;
	}
	for (int i = 0; i < r; i++)
	{
		for (int j = 0; j < c; j++)
		{
			cout << m[i][j] << "\t";
		}
		cout << endl;
	}
}

void removeMatrix(int**& m, int r)
{
	for (int i = 0; i < r; i++)
	{
		delete[] m[i]; // вилучаємо кожен рядок у циклі
	}
	delete[] m;  // вилучаємо масив вказівників
	
	m = nullptr;
}


void addRow(int**& m, int& r, int c, int value)
{
	++r; // збільшили кількість рядків + 1
	int** tmp = new int* [r]; // створили маси вказівників на рядки більшого розміру +1

	for (int i = 0; i < r - 1 ; i++)
	{
		tmp[i] = m[i]; // перечипили старі рядки у новий масив вказівників 
	}

	tmp[r - 1] = new int[c]; // створили новий рядок як останній у новій матриці
	for (int j = 0; j < c; j++)
	{
		tmp[r - 1][j] = value; //заповнили новий рядок однаковими значеннями value
	}

	delete[] m;
	m = tmp;
}




========================================================================
19_Pointer_to_function

Вказівники на функції

назва функції це і є адреса, на яку можна призначити вказівник

int fun(int v){
	return v*v;
}
	

	double (*ptr)(double); - створення вказівника, який можна назначити на функцію, яка має один параметр типу дабл, і повертає теж дабл
	
	ptr = fun; - посилаєтсья на фукнцію fun
тепер можна писати ptr(value) - і це буде тесаме що fun(value)


double (*arrFun[SIZE]) (double) = {sqr, cube, power}; = це масив вказівників на функції

arrFun[0](value) - викликали фукнцію sqr з масиву вище

Якщо звверху написати 
	using PtrIntType = int*; - тепер замість int* можна використовувати PtrIntType

	void changeArray(int* arr, int size, int func(int)) 
{
    for (int i = 0; i < size; i++)
    {
        arr[i] = func(arr[i]);
    }
}

void arraysAction(int arr1[], int arr2[], int arr3[], int size, int func(int, int)) {
    for (int i = 0; i < size; i++)
    {
        arr3[i] = func(arr1[i], arr2[i]);
    }
    print(arr3, size);
}


========================================================================
20_preprocessor

Препроцесор - програма, яка працює ДО початку компіляції сpp-програми, виконує ТЕКСТОВІ заміни у коді.

#define SIZE 5 // визначили препроцесорну константу, препроцесор далі по коду позамінює SIZE на 5

#define MAX(a,b) ((a)> (b)? (a): (b)) // визначили макрос з іменем MAX, макрос має два параметри, у точку виклику макроса препроцесор підставить тіло макросу на фактичних параметрах

#define DOUBLE



void main(){

#ifdef INTEGER // якщо визначено препроцесорне імя INTEGER, 
	int matrix[ROWS][COLS]{ 1,2,3,4 }; // то створюється матриця з цілих чисел
#elif defined(DOUBLE) // інакше, якщо визначено препроцесорне імя DOUBLE,
	double matrix[ROWS][COLS]{ 1.1,2.2,3.3, 4.4 }; // то створюється матриця з дробових  чисел
#else          //інакше
	char matrix[ROWS][COLS]{ 'a','b','c','d' };// то створюється матриця з символів
#endif

}

========================================================================
21_Structure
Структури

const int size = 20;
struct Dog    - структура з наступними змінними, Dog як шаблон
{
	char nick[size] = "Noname"; - значення по дефолту
	char size[size] = "Unknown";
	int age = 0;
	char color[size] = "Nocolor;
	
};



void printDog(const Dog& dog)     ставимо const щоб не можна було змінити, а посилання бо так швидше чим просто копія (витрачається лишній час)
{
	cout << "\nDog's nick : " << dog.nick << endl;
	cout << "Dog's size: " << dog.size << endl;
	cout << "Dog's age : " << dog.age << endl;
	cout << "Dog's color : " << dog.color << endl;
	cout << endl;
}

void inputDog{Dog& dog) - функція має змінювати ставимо за посилання & 
{
	cout << "Enter nick : ";
	cin >> dog.nick;
	cout << "Enter size : ";
	cin >> dog.size;
	cout << "Enter age : ";
	cin >> dog.age;
	cout << "Enter color : ";
	cin >> dog.color;
}


Dog olderDog(const & dog1, const Dog & dog2)
{
	 if (dog1.age >= dog2.age)
		 return dog1;
	 return dog2;
}



dog.nick = це беспосередньо змінна
dog->age=5; - це посилання

	
main(){
	Dog dog{"Jack", "medium", .....};  - створили екземпляр dog типу Dog
	dog.age = 2; - Вказуємо значення змінної age в dog
	
	cin >> dog.nick; - захватуємо з клавіатури
	
	Dog cloneJack = dog; - всі елементи об"єкта dog скопіюється в cloneJack
	
	
	
	Dog * dog3 = new Dog("bobik", "Big", 4, "black");
	
	dog->age=5; - операція доступу до елемента структури через вказівник
	printDog(*dog3);
	
	// . операція доступу до елемента структури через обєкт 
	// -> операція доступу до елемента структури через вказівник 	
	
	}
	
	
Массив структура
array of structs

struct Product
{
	char name[MAX_LEN];
	double price;
};



void printProduct(const Product& product)
{
	cout << "Product: '" << product.name << "', price: " << product.price << endl;
}

void printShop(const Product  shop[], int actualSize)
{
	for (int i = 0; i < actualSize; i++)
	{
		cout << "#" << i + 1 << "\t";
		printProduct(shop[i]);
	}
}

void printProducts(const Product shop[], int actualSize, const char* name)
{
	cout << "Products with name like '" << name << "'\n";
	for (int i = 0; i < actualSize; i++)
	{
		//if (_stricmp(name, shop[i].name) == 0) // чи співпадають рядки?
		if (strstr(shop[i].name, name)!=nullptr) // чи name є частинрою назви товару shop[i].name
		{
			printProduct(shop[i]);
		}
	}
}

main(){
	const int MAX_SIZE = 10;

	int actualSize = 3;
	Product shop[MAX_SIZE]
	{
		{"Bread bread", 2.20},
		{"Bread white", 1.80},
		{"Yogurt", 3.10},
		{"Apple juice", 2.77},
	};
	printShop(shop, actualSize);
	cout << endl;

	printProducts(shop, actualSize, "Bread");
	cout << endl;
	Product milk{ "Milk", 2.45 };	
	addProduct(milk, shop, actualSize, MAX_SIZE);
	printShop(shop, actualSize);
	
}

}


========================================================================
22_Nested structs_Dynamic_array_struts

Вкладені структури. Масив структур. Робота з файлами

﻿#include <iostream>
#include <cstring>
#include <string>

using namespace std;

	
struct Employee {
	string fullName;
	string position;
	int age;

	struct Contacts {
		string email;
		string phone;
	};

	Contacts contacts;
};


employee.contacts.email - доступ до поля вкладенної структури

Employee::Contacts contacts = {"coname@gmail.com","XXXXXXXX"]; - доступ якщо структура вкладена


void printContacts(const Employee::Contacts contacts)
{
	cout << "Email: " << contacts.email << endl;
	cout << "Phone: " << contacts.phone << endl;
}

void printEmployee(const Employee& employee)
{
	cout << "Full Name: " << employee.fullName << endl;
	cout << "Position: " << employee.position << endl;
	cout << "Age: " << employee.age << endl;
	printContacts(employee.contacts);
}




void addEmployee(const Employee& empl, Employee*& company, int & actualSize, int& capacity)
{
	if (actualSize >= capacity)
	{
		cout << "Not enough space!\n";
		return;
	}
	++actualSize;
	Employee* tmp = new Employee[actualSize];
	for (int i = 0; i < actualSize - 1; i++)
	{
		tmp[i] = company[i];
	}
	tmp[actualSize - 1] = empl;

	delete[] company;
	company = tmp;
}




int main()
{
	int capacity = 10;

	int actualSize = 0;
	Employee* company = new Employee[capacity];// nullptr

	Employee emp{ "Daria D.", "QA", 24, {"daria@gmail.com", "0908678565656"} };
	addEmployee(emp, company, actualSize, capacity);
	
	Employee emp2{ "Sergii S.", "BA", 34, {"sergii@gmail.com", "09086788888"} };
	addEmployee(emp2, company, actualSize, capacity);

	printCompany(company, actualSize);

	delete[] company;
}





Запис у файл

#include <fstream> - file stream

int main()
{
	string fname = "my.txt"; (файл створиться або перезапишеться, якщо вже є)
	ofstream f(fname); // створили обєкт файлового потоку f і повязали цей потік з фізичним файлом
	if (!fout.is_open())
    {
        cout << "Error opening file\n";
        return 0;
    }
	f << "Hello"; - записує в файл
	f.close(); - закриває файл
	
	ifstream fin(fname);
    char readText[256];
    int readValue;

    //fin >> readText; // прочитає перше слово
    fin.getline(readText, 100);
    fin >> readValue;

    cout << "Read text from file : " << readText << endl;
    cout << "Read value from file : " << readValue << endl;
	
}

========================================================================
Intro to OOP
23_IntroToOOP

звичайний масив-однотипних даних
struct - масив різнотипних данних. - object (складний тип даних)


Структурне (процедурне) програмування - працює тільки з глобальними функціями і треба було передавати обєкт

Об"єктно орієнтоване програмування
Функції описуються всередині class

Три кити ООР
	-інкапсуляція Encapsulation - властивість пов"язати дані та методи роботи всереди класу (в клас ми вкладаємо змінні, що характеризують обєкт і методи работи з цими змінними)
		- змінні члени класу треба приховати
		-
	
	-наслідування inheritance - роблять базовий клас і на основі його роблять дочірниій клас
	-поліморфізм - економія понять. Коли у багатьох класах метод називається однаково а реаліхацію має свою.
		
	Метод (функція) завантажити.
	В автомобіль - відкрити і сісти
	в мотоцикл - по своєму


struct - це public
class - по замовчуванню privat


class Student      - клас, назва унікальна
{
private:	
	string name;		- це змінні члени класу  (data members)
	string surname;
	int marks[3];


public: - щиб до методів був доступ ззовні	
	double getAvr()    - це фукції члени класу, методи (класу) (метод це всерелині класу, фукнкцією називають глобальні)
	
	void setName(string name) - це сеттер (Set). Метод щоб встановити значення
	{
		this->name = name;
	}
	
	string getName()      -це геттер, який виводить значення
	{
		return name;
	}
	
};


int main()
{
	Student st;
	st.setName("Tom"); - використовуємо сеттер щоб внести значення
	cout << st.getName(); - геттер вертає імя



getline(cin, name1);
========================================================================




	
	




