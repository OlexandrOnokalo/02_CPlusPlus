
Завдання 1
Написати функцію або шаблон функції, яка сортує масив за зростанням або за спаданням методом вибору (Selection Sort), 
залежно від третього параметра функції. 
Якщо він дорівнює true, сортування йде за зростанням, якщо false — за спаданням. 
Перші 2 параметри функції — це масив і його розмір, третій параметр за замовчуванням дорівнює true.

Завдання 2
Написати функцію або шаблон функції, яка сортує першу половину масиву за спаданням, а другу — за зростанням,
використовуючи алгоритм бульбашки або камінця.

Завдання 3
У функцію передається масив випадкових чисел у діапазоні від -20 до +20. 
Необхідно знайти позиції крайніх від'ємних елементів (найлівішого від'ємного елемента і найправішого від'ємного елемента) 
і відсортувати елементи, що знаходяться між ними.

Додатково написати функції пошуку першого від'ємного (найлівішого) та останнього від'ємного (найправішого) елемента. 
Функції повертають індекс знайденого від'ємного або -1 при невдалому пошуку. 
Використати ці функції для пошуку крайніх від'ємних елементів у масиві.
_____________________________________________________________________________

Додаткове завдання.
Завдання 4
Переписати функцію бінарного пошуку (є у прикладах у тімсі, у вкладці Файли, Папка "Сортування та Пошук").
int binarySearch(int key, const int arr[], int size)
{
    int left = 0, right = size - 1;
    int mid = 0;
    while (left <= right)
    {
        mid = (left + right) / 2;
        if (arr[mid] == key)
            return mid;
        if (key > arr[mid])
            left = mid + 1;
        else
            right = mid - 1;
    }
    return -1;
}
Варіанти виконання:
    1) Додати у функцію третій параметр логічного типу, який буде вказувати на порядок сортування.
    Якщо він дорівнює true, то у функцію передано масив впорядкований за зростанням, якщо false — за спаданням.
    2) Без додаткового параметра, перевірити першу пару едементів, і будемо знати тип впорядкованості.
Перевірити роботу функції для масивів, впорядкованих за різною ознакою (зростання, спадання).

